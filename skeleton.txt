SCC.211 Operating Systems: FAT16 Filesystem exercise

The following show the layout and standard names for the key FAT16 values.
You are free to include any of the following in your solution.

================================================================================

		FAT16 Boot Sector and BPB Information

	uint8_t		BS_jmpBoot[ 3 ];	// x86 jump instr. to boot code
	uint8_t		BS_OEMName[ 8 ];	// What created the filesystem
	uint16_t	BPB_BytsPerSec;		// Bytes per Sector
	uint8_t		BPB_SecPerClus;		// Sectors per Cluster
	uint16_t	BPB_RsvdSecCnt;		// Reserved Sector Count
	uint8_t		BPB_NumFATs;		// Number of copies of FAT
	uint16_t	BPB_RootEntCnt;		// FAT12+FAT16: size of root DIR
	uint16_t	BPB_TotSec16;		// Sectors, may be 0, see below
	uint8_t		BPB_Media;		// Media type, e.g. fixed
	uint16_t	BPB_FATSz16;		// Size of FAT (FAT12 or FAT16)
	uint16_t	BPB_SecPerTrk;		// Sectors per Track
	uint16_t	BPB_NumHeads;		// Number of heads in disk
	uint32_t	BPB_HiddSec;		// Hidden Sector count
	uint32_t	BPB_TotSec32;		// Sectors if BPB_TotSec16 == 0
	uint8_t		BS_DrvNum;		// 0 = floppy, 0x80 = hard disk
	uint8_t		BS_Reserved1;		// 
	uint8_t		BS_BootSig;		// Should = 0x29
	uint32_t	BS_VolID;		// 'Unique' ID for volume
	uint8_t		BS_VolLab[ 11 ];	// Non zero terminated string
	uint8_t		BS_FilSysType[ 8 ];	// = 'FAT16   ' (Not 0 term.)



================================================================================

		Normal (short) directory entry

	uint8_t		DIR_Name[ 11 ];		// Non zero terminated string
	uint8_t		DIR_Attr;		// File attributes
	uint8_t		DIR_NTRes;		// Used by Windows NT, ignore
	uint8_t		DIR_CrtTimeTenth;	// Tenths of sec. 0..199
	uint16_t	DIR_CrtTime;		// Creation Time in 2s intervals
	uint16_t	DIR_CrtDate;
	uint16_t	DIR_LstAccDate;		// Date of last read or write
	uint16_t	DIR_FstClusHI;		// Top bits file's 1st cluster
	uint16_t	DIR_WrtTime;		// Time of last write
	uint16_t	DIR_WrtDate;		// Date of last write
	uint16_t	DIR_FstClusLO;		// Lower bits file's 1st cluster
	uint32_t	DIR_FileSize;		// File size in bytes



================================================================================

		Long (aka. VFAT) directory entry

	uint8_t		LDIR_Ord;		// Order/ position in sequence
	uint8_t		LDIR_Name1[ 10 ];	// First 5 UNICODE characters
	uint8_t		LDIR_Attr;		// = ATTR_LONG_NAME
	uint8_t		LDIR_Type;		// Should = 0
	uint8_t		LDIR_Chksum;		// Checksum of short name
	uint8_t		LDIR_Name2[ 12 ];	// Middle 6 UNICODE characters
	uint16_t	LDIR_FstClusLO;		// MUST be zero
	uint8_t		LDIR_Name3[ 4 ];	// Last 2 UNICODE characters



